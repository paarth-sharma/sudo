package pages

import (
    "fmt"
    "time"
    "sudo/internal/models"
    "sudo/templates/layouts"
)

templ DashboardWithNested(mainBoards []models.Board, nestedBoards []models.Board) {
    @layouts.Base("Dashboard - SUDO Kanban") {
        <div class="min-h-screen bg-gray-50">
            <!-- Header -->
            <header class="bg-white shadow-sm">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex justify-between items-center h-16">
                        <div class="flex items-center">
                            <h1 class="text-2xl font-bold text-gray-900">SUDO Dashboard</h1>
                            <span class="ml-3 text-sm text-gray-500">Suck It Up and Do It</span>
                        </div>
                        
                        <div class="flex items-center space-x-4">
                            <!-- Search -->
                            <div class="relative">
                                <input 
                                    type="text" 
                                    placeholder="Search boards..." 
                                    class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    onkeyup="filterBoards(this.value)"
                                />
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                    </svg>
                                </div>
                            </div>
                            
                            <!-- Create Board Button -->
                            <button 
                                onclick="document.getElementById('create-board-modal').classList.remove('hidden')"
                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                            >
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Create Board
                            </button>
                            
                            <!-- User Menu -->
                            <div class="relative">
                                <button 
                                    onclick="document.getElementById('user-menu').classList.toggle('hidden')"
                                    class="bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                                >
                                    <span class="sr-only">Open user menu</span>
                                    <div class="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center">
                                        <span class="text-sm font-medium text-white">U</span>
                                    </div>
                                </button>
                                
                                <div id="user-menu" class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                                    <div class="py-1">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
                                        <button 
                                            hx-post="/auth/logout"
                                            class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                        >
                                            Sign out
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Main Content -->
            <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                <div class="px-4 py-6 sm:px-0">
                    <!-- Quick Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                        <!-- Total Boards (Main + Nested) -->
                        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z"></path>
                                    </svg>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%d", len(mainBoards) + len(nestedBoards)) }</p>
                                    <p class="text-sm text-gray-600">Total Boards</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Active Tasks -->
                        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%d", getTotalTasksFromBothLists(mainBoards, nestedBoards)) }</p>
                                    <p class="text-sm text-gray-600">Active Tasks</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Due Soon -->
                        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%d", getOverdueTasksFromBothLists(mainBoards, nestedBoards)) }</p>
                                    <p class="text-sm text-gray-600">Due Soon</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Collaborators -->
                        <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                    </svg>
                                </div>
                                <div class="ml-4">
                                    <p class="text-2xl font-semibold text-gray-900">{ fmt.Sprintf("%d", getTotalCollaboratorsFromBothLists(mainBoards, nestedBoards)) }</p>
                                    <p class="text-sm text-gray-600">Collaborators</p>
                                </div>
                            </div>
                        </div>
                    </div>
                <!-- Nested Boards Section -->
                if len(nestedBoards) > 0 {
                    <div class="mb-8 p-6 bg-gray-50 border border-gray-200 rounded-lg">
                        <div class="flex items-center justify-between mb-4">
                            <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                                <svg class="w-6 h-6 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                                Sub-boards ({ fmt.Sprintf("%d", len(nestedBoards)) })
                            </h2>
                        </div>
                        
                        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                            for _, board := range nestedBoards {
                                <div class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200 group">
                                    <div class="p-6">
                                        <div class="flex items-start justify-between">
                                            <div class="flex-1">
                                                <div class="flex items-center space-x-2 mb-2">
                                                    <h3 class="text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
                                                        <a href={ templ.SafeURL("/boards/" + board.ID.String()) }>
                                                            { board.Title }
                                                        </a>
                                                    </h3>
                                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 0 012 2v2M7 7h10"></path>
                                                        </svg>
                                                        Sub
                                                    </span>
                                                </div>
                                                
                                                if board.Description != "" {
                                                    <p class="text-gray-600 text-sm mb-4 line-clamp-3">{ board.Description }</p>
                                                }
                                                
                                                <div class="flex items-center justify-between text-sm text-gray-500">
                                                    <div class="flex items-center">
                                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                        </svg>
                                                        { board.CreatedAt.Format("Jan 2, 2006") }
                                                    </div>
                                                    <div class="flex items-center">
                                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                        </svg>
                                                        { board.UpdatedAt.Format("Jan 2") }
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <!-- Board Menu -->
                                            <div class="relative">
                                                <button 
                                                    onclick={ toggleBoardMenuDashboardScript(board.ID.String()) }
                                                    class="p-1 text-gray-400 hover:text-gray-600 rounded-md opacity-0 group-hover:opacity-100 transition-all"
                                                >
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                                    </svg>
                                                </button>
                                                
                                                <div id={ fmt.Sprintf("board-menu-dashboard-%s", board.ID.String()) } class="hidden absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg py-1 z-10 border">
                                                    <a href={ templ.SafeURL("/boards/" + board.ID.String()) } class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                        </svg>
                                                        View Board
                                                    </a>
                                                    <button onclick={ deleteBoardDashboardScript(board.ID.String()) } class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                                                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                        Delete Board
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                
                <!-- Main Boards Section -->
                <div class="mb-8">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                            <svg class="w-6 h-6 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2z"></path>
                            </svg>
                            if len(nestedBoards) > 0 {
                                Main Boards ({ fmt.Sprintf("%d", len(mainBoards)) })
                            } else {
                                Your Boards ({ fmt.Sprintf("%d", len(mainBoards)) })
                            }
                        </h2>
                    </div>
                    
                    if len(mainBoards) > 0 {
                        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3" id="boards-grid">
                            for _, board := range mainBoards {
                                @DashboardBoardCard(board)
                            }
                        </div>
                    } else {
                        <!-- Empty State -->
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2z"></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No boards</h3>
                            <p class="mt-1 text-sm text-gray-500">Get started by creating your first board.</p>
                            <div class="mt-6">
                                <button 
                                    onclick="document.getElementById('create-board-modal').classList.remove('hidden')"
                                    class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                >
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    Create Board
                                </button>
                            </div>
                        </div>
                    }
                    </div>
                </div>
            </main>

            <!-- Create Board Modal -->
            @DashboardCreateBoardModal()
        </div>
        
        <script>
            // Filter boards function
            function filterBoards(query) {
                const boardCards = document.querySelectorAll('#boards-grid > div, .grid.gap-6 > div');
                const searchQuery = query.toLowerCase();
                
                boardCards.forEach(card => {
                    const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
                    const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
                    
                    if (title.includes(searchQuery) || description.includes(searchQuery) || searchQuery === '') {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
            
            // Toggle board menu for dashboard
            function toggleBoardMenuDashboard(boardId) {
                const menu = document.getElementById(`board-menu-dashboard-${boardId}`);
                const allMenus = document.querySelectorAll('[id^="board-menu-dashboard-"]');
                
                // Close all other menus
                allMenus.forEach(m => {
                    if (m.id !== `board-menu-dashboard-${boardId}`) {
                        m.classList.add('hidden');
                    }
                });
                
                // Toggle current menu
                menu.classList.toggle('hidden');
            }
            
            // Close menus when clicking outside
            document.addEventListener('click', function(event) {
                if (!event.target.closest('[onclick*="toggleBoardMenuDashboard"]')) {
                    const allMenus = document.querySelectorAll('[id^="board-menu-dashboard-"]');
                    allMenus.forEach(menu => menu.classList.add('hidden'));
                }
            });
            
            // Export functions
            window.toggleBoardMenuDashboard = toggleBoardMenuDashboard;
            window.filterBoards = filterBoards;
        </script>
    }
}

// Dashboard Board Card Component (renamed to avoid conflicts)
templ DashboardBoardCard(board models.Board) {
    <div class="bg-white overflow-hidden shadow rounded-lg hover:shadow-md transition-shadow duration-200 group">
        <div class="p-6">
            <div class="flex items-start justify-between">
                <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                        <a href={ templ.SafeURL("/boards/" + board.ID.String()) }>
                            { board.Title }
                        </a>
                    </h3>
                    
                    if board.Description != "" {
                        <p class="text-gray-600 text-sm mb-4 line-clamp-3">{ board.Description }</p>
                    }
                    
                    <div class="flex items-center justify-between text-sm text-gray-500">
                        <div class="flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            { board.CreatedAt.Format("Jan 2, 2006") }
                        </div>
                        <div class="flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            { board.UpdatedAt.Format("Jan 2") }
                        </div>
                    </div>
                </div>
                
                <!-- Board Menu -->
                <div class="relative">
                    <button 
                        onclick={ toggleBoardMenuDashboardScript(board.ID.String()) }
                        class="p-1 text-gray-400 hover:text-gray-600 rounded-md opacity-0 group-hover:opacity-100 transition-all"
                    >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                        </svg>
                    </button>
                    
                    <div id={ fmt.Sprintf("board-menu-dashboard-%s", board.ID.String()) } class="hidden absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg py-1 z-10 border">
                        <a href={ templ.SafeURL("/boards/" + board.ID.String()) } class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                            </svg>
                            View Board
                        </a>
                        <button onclick={ deleteBoardDashboardScript(board.ID.String()) } class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Delete Board
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

// Dashboard Create Board Modal Component (renamed to avoid conflicts)
templ DashboardCreateBoardModal() {
    <div id="create-board-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="flex items-center justify-between pb-3 border-b">
                <h3 class="text-lg font-semibold text-gray-900">Create New Board</h3>
                <button onclick="document.getElementById('create-board-modal').classList.add('hidden')" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form hx-post="/boards" hx-target="#boards-grid" hx-swap="beforeend" class="mt-4 space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Board Title</label>
                    <input 
                        type="text" 
                        name="title" 
                        required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Enter board title"
                    />
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                    <textarea 
                        name="description" 
                        rows="3"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                        placeholder="Brief description of your board"
                    ></textarea>
                </div>
                
                <div class="flex space-x-3 pt-4 border-t">
                    <button 
                        type="submit"
                        class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        Create Board
                    </button>
                    <button 
                        type="button"
                        onclick="document.getElementById('create-board-modal').classList.add('hidden')"
                        class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors focus:outline-none"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
}

script toggleBoardMenuDashboardScript(boardID string) {
    toggleBoardMenuDashboard(boardID);
}

script deleteBoardDashboardScript(boardID string) {
    deleteBoard(boardID);
}

// Helper functions for dashboard metrics (adapted for both main and nested boards)
func getTotalTasksFromBothLists(mainBoards []models.Board, nestedBoards []models.Board) int {
    total := 0
    
    // Count tasks from main boards
    for _, board := range mainBoards {
        for _, column := range board.Columns {
            total += len(column.Tasks)
        }
    }
    
    // Count tasks from nested boards
    for _, board := range nestedBoards {
        for _, column := range board.Columns {
            total += len(column.Tasks)
        }
    }
    
    return total
}

func getOverdueTasksFromBothLists(mainBoards []models.Board, nestedBoards []models.Board) int {
    overdue := 0
    now := time.Now()
    
    // Count overdue tasks from main boards
    for _, board := range mainBoards {
        for _, column := range board.Columns {
            for _, task := range column.Tasks {
                if task.Deadline != nil && task.Deadline.Before(now) && !task.Completed {
                    overdue++
                }
            }
        }
    }
    
    // Count overdue tasks from nested boards
    for _, board := range nestedBoards {
        for _, column := range board.Columns {
            for _, task := range column.Tasks {
                if task.Deadline != nil && task.Deadline.Before(now) && !task.Completed {
                    overdue++
                }
            }
        }
    }
    
    return overdue
}

func getTotalCollaboratorsFromBothLists(mainBoards []models.Board, nestedBoards []models.Board) int {
    collaborators := make(map[string]struct{})
    
    // Count unique collaborators from main boards
    for _, board := range mainBoards {
        for _, member := range board.Members {
            collaborators[member.ID.String()] = struct{}{}
        }
    }
    
    // Count unique collaborators from nested boards
    for _, board := range nestedBoards {
        for _, member := range board.Members {
            collaborators[member.ID.String()] = struct{}{}
        }
    }
    
    return len(collaborators)
}

func getTotalColumnsFromBothLists(mainBoards []models.Board, nestedBoards []models.Board) int {
    total := 0
    
    // Count columns from main boards
    for _, board := range mainBoards {
        total += len(board.Columns)
    }
    
    // Count columns from nested boards
    for _, board := range nestedBoards {
        total += len(board.Columns)
    }
    
    return total
}