// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"sudo/internal/models"
	"time"
)

func NotificationCenter(notifications []models.Activity) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"notification-center\" class=\"hidden fixed top-16 right-4 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-96 overflow-hidden\"><!-- Header --><div class=\"flex items-center justify-between p-4 border-b border-gray-200\"><h3 class=\"text-sm font-semibold text-gray-900\">Notifications</h3><div class=\"flex items-center space-x-2\"><button onclick=\"markAllAsRead()\" class=\"text-xs text-blue-600 hover:text-blue-800\">Mark all read</button> <button onclick=\"toggleNotificationCenter()\" class=\"text-gray-400 hover:text-gray-600\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div></div><!-- Notifications List --><div class=\"max-h-80 overflow-y-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(notifications) == 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"p-8 text-center\"><svg class=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 17h5l-5-5 5-5h-5V1H9v6H4l5 5-5 5h5v6h6v-6z\"></path></svg><h3 class=\"mt-2 text-sm font-medium text-gray-900\">No notifications</h3><p class=\"mt-1 text-sm text-gray-500\">You're all caught up!</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"divide-y divide-gray-200\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, notification := range notifications {
				var templ_7745c5c3_Var2 = []any{getNotificationClass(notification)}
				templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/components/notifications.templ`, Line: 1, Col: 0}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\" data-notification-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(notification.ID.String())
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/components/notifications.templ`, Line: 45, Col: 118}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"><div class=\"flex space-x-3\"><!-- Icon --><div class=\"flex-shrink-0\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if notification.Action == "assigned" {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<div class=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\"><svg class=\"w-4 h-4 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path></svg></div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else if notification.Action == "created" {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\"><svg class=\"w-4 h-4 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path></svg></div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else if notification.Action == "invited" {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\"><svg class=\"w-4 h-4 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"></path></svg></div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<div class=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\"><svg class=\"w-4 h-4 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 17h5l-5-5 5-5h-5V1H9v6H4l5 5-5 5h5v6h6v-6z\"></path></svg></div>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</div><!-- Content --><div class=\"flex-1 min-w-0\"><p class=\"text-sm font-medium text-gray-900\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(notification.Description)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/components/notifications.templ`, Line: 79, Col: 65}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</p><p class=\"text-sm text-gray-500 mt-1\">Activity: ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(notification.Action)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/components/notifications.templ`, Line: 82, Col: 70}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</p><p class=\"text-xs text-gray-400 mt-1\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(formatNotificationTime(notification.CreatedAt))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/components/notifications.templ`, Line: 85, Col: 87}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</p></div><!-- Actions --><div class=\"flex-shrink-0 flex items-start space-x-1\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if true {
					templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: "markAsRead('" + notification.ID.String() + "')"})
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<button onclick=\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var8 templ.ComponentScript = templ.ComponentScript{Call: "markAsRead('" + notification.ID.String() + "')"}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var8.Call)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" class=\"text-blue-600 hover:text-blue-800 text-xs\">Mark read</button> ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.ComponentScript{Call: "dismissNotification('" + notification.ID.String() + "')"})
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<button onclick=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 templ.ComponentScript = templ.ComponentScript{Call: "dismissNotification('" + notification.ID.String() + "')"}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var9.Call)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" class=\"text-gray-400 hover:text-gray-600\"><svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</div><!-- Footer -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(notifications) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<div class=\"p-3 border-t border-gray-200\"><a href=\"/notifications\" class=\"text-sm text-blue-600 hover:text-blue-800 font-medium\">View all notifications</a></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</div><script>\r\n        function toggleNotificationCenter() {\r\n            const center = document.getElementById('notification-center');\r\n            center.classList.toggle('hidden');\r\n            \r\n            if (!center.classList.contains('hidden')) {\r\n                // Mark notifications as seen (not read, just seen)\r\n                fetch('/api/notifications/seen', {\r\n                    method: 'POST',\r\n                    credentials: 'include'\r\n                }).catch(console.error);\r\n            }\r\n        }\r\n        \r\n        function markAsRead(notificationId) {\r\n            fetch(`/api/notifications/${notificationId}/read`, {\r\n                method: 'POST',\r\n                credentials: 'include'\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    const notification = document.querySelector(`[data-notification-id=\"${notificationId}\"]`);\r\n                    if (notification) {\r\n                        notification.classList.remove('bg-blue-50');\r\n                        notification.classList.add('bg-white');\r\n                        // Remove mark as read button\r\n                        const markReadBtn = notification.querySelector('button[onclick*=\"markAsRead\"]');\r\n                        if (markReadBtn) {\r\n                            markReadBtn.remove();\r\n                        }\r\n                    }\r\n                    updateNotificationBadge();\r\n                }\r\n            }).catch(console.error);\r\n        }\r\n        \r\n        function markAllAsRead() {\r\n            fetch('/api/notifications/read-all', {\r\n                method: 'POST',\r\n                credentials: 'include'\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    // Update UI\r\n                    document.querySelectorAll('[data-notification-id]').forEach(notification => {\r\n                        notification.classList.remove('bg-blue-50');\r\n                        notification.classList.add('bg-white');\r\n                        const markReadBtn = notification.querySelector('button[onclick*=\"markAsRead\"]');\r\n                        if (markReadBtn) {\r\n                            markReadBtn.remove();\r\n                        }\r\n                    });\r\n                    updateNotificationBadge();\r\n                }\r\n            }).catch(console.error);\r\n        }\r\n        \r\n        function dismissNotification(notificationId) {\r\n            fetch(`/api/notifications/${notificationId}`, {\r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    const notification = document.querySelector(`[data-notification-id=\"${notificationId}\"]`);\r\n                    if (notification) {\r\n                        notification.remove();\r\n                        updateNotificationBadge();\r\n                    }\r\n                }\r\n            }).catch(console.error);\r\n        }\r\n        \r\n        function updateNotificationBadge() {\r\n            const badge = document.getElementById('notification-badge');\r\n            const unreadCount = document.querySelectorAll('.bg-blue-50[data-notification-id]').length;\r\n            \r\n            if (badge) {\r\n                if (unreadCount > 0) {\r\n                    badge.textContent = unreadCount > 99 ? '99+' : unreadCount;\r\n                    badge.classList.remove('hidden');\r\n                } else {\r\n                    badge.classList.add('hidden');\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Close notification center when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const center = document.getElementById('notification-center');\r\n            const trigger = document.getElementById('notification-trigger');\r\n            \r\n            if (!center.contains(event.target) && !trigger.contains(event.target)) {\r\n                center.classList.add('hidden');\r\n            }\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func getNotificationClass(notification models.Activity) string {
	baseClass := "p-4 hover:bg-gray-50 cursor-pointer transition-colors"
	// For now, assume all activities are unread (since there's no ReadAt field)
	return baseClass + " bg-blue-50"
}

func formatNotificationTime(createdAt time.Time) string {
	now := time.Now()
	diff := now.Sub(createdAt)

	switch {
	case diff < time.Minute:
		return "Just now"
	case diff < time.Hour:
		minutes := int(diff.Minutes())
		return fmt.Sprintf("%dm ago", minutes)
	case diff < 24*time.Hour:
		hours := int(diff.Hours())
		return fmt.Sprintf("%dh ago", hours)
	case diff < 7*24*time.Hour:
		days := int(diff.Hours() / 24)
		return fmt.Sprintf("%dd ago", days)
	default:
		return createdAt.Format("Jan 2")
	}
}

var _ = templruntime.GeneratedTemplate
