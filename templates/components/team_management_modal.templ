package components

import (
    "sudo/internal/models"
    "fmt"
)

templ TeamManagementModal(members []models.BoardMember, boardID string) {
    <div id="team-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-3xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex items-center justify-between p-6 border-b border-gray-200">
                <h3 class="text-lg font-semibold text-gray-900">Team Management</h3>
                <button 
                    onclick="document.getElementById('team-modal').classList.add('hidden')"
                    class="text-gray-400 hover:text-gray-600"
                >
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div class="p-6">
                <!-- Add Member Section -->
                <div class="mb-8">
                    <h4 class="text-md font-semibold text-gray-900 mb-4">Add Team Member</h4>
                    <form 
                        hx-post={"/boards/" + boardID + "/invite"}
                        hx-target="#team-members-list"
                        hx-swap="beforeend"
                        hx-on::after-request="this.reset(); showInviteSuccess()"
                        class="flex gap-3"
                    >
                        <div class="flex-1">
                            <input 
                                type="email" 
                                name="email" 
                                placeholder="Enter email address..." 
                                required
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            />
                        </div>
                        <div>
                            <select 
                                name="role" 
                                class="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            >
                                <option value="member">Member</option>
                                <option value="admin">Admin</option>
                                <option value="viewer">Viewer</option>
                            </select>
                        </div>
                        <button 
                            type="submit"
                            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors whitespace-nowrap"
                        >
                            Send Invite
                        </button>
                    </form>
                </div>
                
                <!-- Current Team Members -->
                <div>
                    <h4 class="text-md font-semibold text-gray-900 mb-4">Current Members ({fmt.Sprintf("%d", len(members))})</h4>
                    <div id="team-members-list" class="space-y-3">
                        for _, member := range members {
                            if member.User != nil {
                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border">
                                    <div class="flex items-center space-x-3">
                                        <!-- Avatar -->
                                        <div class="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-medium">
                                            if member.User.Name != "" {
                                                {member.User.GetInitials()}
                                            } else {
                                                {member.User.Email[:2]}
                                            }
                                        </div>
                                        
                                        <!-- Member Info -->
                                        <div>
                                            <div class="font-medium text-gray-900">
                                                {member.User.GetDisplayName()}
                                            </div>
                                            <div class="text-sm text-gray-600">
                                                {member.User.Email}
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center space-x-3">
                                        <!-- Role Badge -->
                                        <span class={getRoleBadgeClass(member.Role)}>
                                            {member.Role}
                                        </span>
                                        
                                        <!-- Status -->
                                        <div class="flex items-center space-x-2">
                                            if !member.JoinedAt.IsZero() {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    <div class="w-2 h-2 bg-green-400 rounded-full mr-1"></div>
                                                    Active
                                                </span>
                                            } else {
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                    <div class="w-2 h-2 bg-yellow-400 rounded-full mr-1"></div>
                                                    Pending
                                                </span>
                                            }
                                        </div>
                                        
                                        <!-- Actions -->
                                        <div class="relative">
                                            <button 
                                                onclick={ templ.ComponentScript{Call: "toggleMemberMenu('" + member.ID.String() + "')"} }
                                                class="p-1 text-gray-400 hover:text-gray-600"
                                            >
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                                                </svg>
                                            </button>
                                            
                                            <div id={"member-menu-" + member.ID.String()} class="hidden absolute right-0 mt-2 w-40 bg-white rounded-md shadow-lg py-1 z-10">
                                                <button class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                    Change Role
                                                </button>
                                                <button class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                    Resend Invite
                                                </button>
                                                <hr class="my-1"/>
                                                <button 
                                                    onclick={ templ.ComponentScript{Call: "removeMember('" + member.ID.String() + "')"} }
                                                    class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
                                                >
                                                    Remove Member
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            
            <!-- Footer -->
            <div class="flex justify-end p-6 border-t border-gray-200">
                <button 
                    onclick="document.getElementById('team-modal').classList.add('hidden')"
                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors"
                >
                    Done
                </button>
            </div>
        </div>
    </div>
    
    <!-- Success notification -->
    <div id="team-success" class="hidden fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50">
        <div class="flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Team member added successfully!</span>
        </div>
    </div>
    
    <script>
        function toggleMemberMenu(memberId) {
            // Close all other menus
            document.querySelectorAll('[id^="member-menu-"]').forEach(menu => {
                if (menu.id !== `member-menu-${memberId}`) {
                    menu.classList.add('hidden');
                }
            });
            
            // Toggle the specific menu
            const menu = document.getElementById(`member-menu-${memberId}`);
            if (menu) {
                menu.classList.toggle('hidden');
            }
        }
        
        function removeMember(memberId) {
            if (confirm('Are you sure you want to remove this team member? They will lose access to this board.')) {
                fetch(`/boards/{boardID}/members/${memberId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to remove member. Please try again.');
                    }
                }).catch(error => {
                    console.error('Error removing member:', error);
                    alert('Failed to remove member. Please try again.');
                });
            }
        }
        
        function showInviteSuccess() {
            const notification = document.getElementById('team-success');
            notification.classList.remove('hidden');
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 3000);
        }
        
        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('[onclick*="toggleMemberMenu"]')) {
                document.querySelectorAll('[id^="member-menu-"]').forEach(menu => {
                    menu.classList.add('hidden');
                });
            }
        });
    </script>
}

func getRoleBadgeClass(role string) string {
    switch role {
    case "admin":
        return "px-2 py-1 text-xs font-medium bg-purple-100 text-purple-800 rounded-full"
    case "member":
        return "px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full"
    case "viewer":
        return "px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full"
    default:
        return "px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full"
    }
}